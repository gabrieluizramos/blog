{"componentChunkName":"component---src-templates-post-article-index-js","path":"/draft/testes-assincronos-em-javascript","result":{"data":{"markdownRemark":{"id":"69d9ddf1-a949-5639-902c-e353c4867779","html":"<p>É bem comum lidar com código assíncrono quando estamos criando alguma aplicação. Seja alguma consulta à alguma API externas ou qualquer trecho de código que possa bloquear a execução de nosso software e esteja organizado de maneira assíncrona. Lidar com essas questões essa é uma realidade no nosso dia-a-dia.</p>\n<p>Assincronia, por si só, é um tópico a parte e que envolve vários conceitos diferentes e relacionados à forma <a href=\"https://gabrieluizramos.com.br/entendendo-o-v8-peca-por-peca/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">como os motores JavaScript funcionam</a> e lidam com ações que serão concluídas no futuro.</p>\n<p>De qualquer forma, garantir que esses cenários estejam sob nosso controle através dos nossos testes é parte fundamental para que tenhamos <a href=\"https://gabrieluizramos.com.br/voce-confia-em-si/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">confiança no software que escrevemos</a> e é sobre isso que vou falar um pouco hoje.</p>\n<!-- https://jestjs.io/docs/pt-BR/asynchronous -->","timeToRead":1,"frontmatter":{"date":"08/06/2020","path":"/draft/testes-assincronos-em-javascript","title":"Testes assíncronos em JavaScript","subtitle":"subtitle","banner":null}}},"pageContext":{}}}