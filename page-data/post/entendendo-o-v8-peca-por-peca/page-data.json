{"componentChunkName":"component---src-templates-post-article-index-js","path":"/post/entendendo-o-v8-peca-por-peca/","result":{"data":{"markdownRemark":{"html":"<p>Há um tempo venho me interessado e dedicado um tempo a estudar como os motores (\"engines\") de <strong>JavaScript</strong> funcionam por debaixo dos panos. Resolvi agrupar o que entendi em um artigo para elucidar todos os componentes envolvidos nessa trama toda. Tenha em mente que a maioria desses estudos e conteúdos baseiam-se no V8, motor utilizado pelo NodeJS e Google Chrome. O que não deve se diferenciar (muito) dos motores utilizados em outros navegadores.</p>\n<hr>\n<h2>Uma pincelada sobre estruturas de dados</h2>\n<p>Antes de começar a entender como um motor <strong>JavaScript</strong> funciona, é importante ter um breve conhecimento sobre algumas estruturas de dados envolvidas no processo: <strong>pilha</strong> e <strong>fila</strong>.</p>\n<h3>Pilha</h3>\n<p>Uma <strong>pilha</strong> segue o princípio chamado <strong>LIFO</strong>: \"last-in, first-out\", que quer dizer que o último valor a ser inserido em uma <strong>pilha</strong>, deverá ser o primeiro a ser retirado.</p>\n<p>Para ficar mais fácil de entender, pense em uma pilha de roupas: você não consegue simplesmente puxar uma roupa de uma pilha sem antes remover as que estão em cima, pois elas cairiam.</p>\n<h3>Fila</h3>\n<p>Já a <strong>fila</strong> segue outro princípio, chamado <strong>FIFO</strong>: \"first-in, first-out\", onde o primeiro valor a entrar numa fila, deverá ser o primeiro a ser retirado.</p>\n<p>Uma <strong>fila</strong> se assemelha às filas que encontramos em super-mercados, bancos ou shows, onde você é atendido por ordem de chegada e não é correto alguma pessoa ser atendida antes de qualquer outra que já estava ali anteriormente (tirando os casos onde existem filas preferenciais).</p>\n<p>Você pode pensar em ambas as estruturas de dados como <strong>arrays</strong> com comportamentos específicos, onde na <strong>pilha</strong> os últimos valores a entrarem nesse <strong>array</strong> serão os primeiros a serem removidos e em uma <strong>fila</strong> seguirão a ordem de entrada, onde os primeiros valores serão os primeiros a serem removidos.</p>\n<!-- ### Heap\nÉ uma estrutura de dados não-linear, assemelha-se muito à estrutura de **árvore** (ou \"**tree**\") e não segue uma ordem predeterminada, como na **pilha** e na **fila**, onde a inserção e remoção segue um padrão específico. -->\n<hr>\n<h2>Alocação de memória e contextos de execução</h2>\n<p>O <strong>JavaScript</strong> aloca/libera memória automaticamente (no espaço de <strong>Heap</strong>), diferente de linguagens de \"baixo nível\" como <strong>C</strong> que permitem gerenciar memória e alocação de forma mais explícita. Em outras palavras, <strong>JavaScript</strong> aloca memória quando valores/objetos são declarados e alterados e libera esse espaço de memória automaticamente quando esses valores não são mais utilizados, deixando essa responsabilidade a cargo do <strong>garbage collector</strong>. Mesmo assim, é importante manter-se sempre atento aos possíveis valores que você declara/instancia para que não fiquem alocados de forma global ou apontem para objetos que não são utilizados, previnindo eventuais vazamento de memória (\"<strong>memory leaks</strong>\").</p>\n<p>Quando você executa um <strong>script</strong> ou uma <strong>função</strong>, o motor do <strong>JavaScript</strong> compila e interpreta o código em tempo de execução (também conhecido como <strong>JIT</strong> ou just-in-time compilation) e cria determinados contextos e espaços de memória onde esse código é executado. Você pode pensar nesses contextos como os escopos onde sua função pode ser executada.</p>\n<p>Vamos criar um trecho de código para exemplificar melhor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numero <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiplica</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando esse trecho de código é executado via <strong>JavaScript</strong>, os seguintes passos ocorrem:</p>\n<ul>\n<li>a variável <strong>numero</strong> é registrada com o valor 10</li>\n<li>a função <strong>multiplica</strong> é registrada com o valor de função</li>\n</ul>\n<p><strong>Mas como assim, valor de função?</strong>\n<strong>JavaScript</strong> é uma linguagem conhecida também por tratar funções como qualquer outro valor. Você pode passar funções como parâmetro, retorná-las de outras funções e atribuí-las à variáveis normalmente. Essa caracterísica é conhecida como <a href=\"https://developer.mozilla.org/pt-BR/docs/Glossario/Funcao-First-class\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>função First-class</strong></a> (ou \"<strong>first-class functions</strong>\").</p>\n<p>Assim como o motor <strong>JavaScript</strong> registra esses valores em sua memória, ele também cria um contexto onde funções são registradas e podem ser executadas. Como estamos executando esse trecho de código diretamente em um arquivo, sem estar dentro de qualquer escopo, a função <strong>multiplica</strong> estará presente no <strong>contexto global</strong> de execução.</p>\n<p>Existem, também, <strong>contextos locais</strong>, que são os responsáveis por guardar funções e variáveis locais à um escopo. Imagine a seguinte alteração na função <strong>multiplica</strong> nosso script:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiplica</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numero</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> multiplicador <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> numero <span class=\"token operator\">*</span> multiplicador<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Fazendo essa pequena alteração, um novo <strong>contexto de execução</strong> é criado <strong>localmente</strong> para a função <strong>multiplica</strong>, armazenando também o valor 2 dentro da variável <strong>multiplicador</strong>.</p>\n<p>Com isso em mente, acredito que você já consegue imaginar que a criação de um contexto dentro de outro pode ser realizada de forma exaustiva.</p>\n<p>Vale lembrar que também é nesse instante que o motor <strong>JavaScript</strong> registra o valor correspondente ao <strong>this</strong> presente no escopo da sua função.</p>\n<hr>\n<h2>Entendendo os componentes do motor</h2>\n<h3>Call Stack</h3>\n<p>Existe uma <strong>pilha</strong> nos motores <strong>JavaScript</strong> chamada <strong>Call Stack</strong> (ou <strong>pilha de chamadas</strong>, em sua tradução), onde cada chamada à uma função é empilhada ao ser executada e desempilhada ao terminar sua execução.</p>\n<p>Executando no seguinte trecho de código, com o <code class=\"language-text\">DevTools</code> aberto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">terceira</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">segunda</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">terceira</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">primeira</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">segunda</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">primeira</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Você verá algo semelhante à isso:</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 690px;\"\n    >\n      <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 45.262390670553934%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'181\\'%3e%3cpath%20d=\\'M1%2091v90h13V12h22l145-1h124V0H1v91M307%206v5h4l5-1%202-2%201%202c-1%201%204%201%2040%201h41V0h-93v6m-6%207l-1%2084v84h5V97c0-82%200-85-2-85l-2%201m6%2017v4h93v-8l-47-1h-46v5m0%2014l-1%2043%201%2034h93V35h-93v9m34%2032h-2l-13-1h-11v3c0%202%200%202%202%201l3-1h1l3%201%202-1c0-1%201-1%202%201h5c12%201%2012%201%2012-2s-1-3-4-1m-35%2054v10c1%202%207%202%2047%202h47v-20h-93l-1%208m7-4l7%201%207%201h8c6%200%207-1%207-2%200-2-1-2-15-2s-14%200-14%202m-6%2021v4h93v-8h-93v4m6%200c0%202%204%203%205%201h1l2%201%201-1h4l6%201c5%200%206%200%206-2l-1-2a514%20514%200%2000-24%202m26%200c0%202%200%202%206%202h8c3%201%2014%200%2014-1%203-2-1-3-14-3-14-1-14%200-14%202m-32%209v5h93v-8l-40-1a493%20493%200%2000-37%203h1c0-2%202-1%202%201a532%20532%200%2000-13%200c0-2%200-2%203-2%206%200%204-2-3-2h-6v4m20%200c1%204%2029%204%2029%200l-15-2c-14%200-14%200-14%202m-20%2010v4h93v-8h-93v4m0%2011l-1%204h94v-9h-93v5m41-1c0%202%200%202%207%202h15c5%200%206%200%207-2s0-2-15-2c-14-1-14%200-14%202\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image lazyload\"\n        alt=\"CallStack no DevTools do Chrome\"\n        title=\"CallStack no DevTools do Chrome\"\n        data-src=\"/static/0eef6d158c3df7b0252e12db82503897/1e043/call-stack.png\"\n        data-srcset=\"/static/0eef6d158c3df7b0252e12db82503897/991de/call-stack.png 173w,\n/static/0eef6d158c3df7b0252e12db82503897/e4d6b/call-stack.png 345w,\n/static/0eef6d158c3df7b0252e12db82503897/1e043/call-stack.png 690w,\n/static/0eef6d158c3df7b0252e12db82503897/e3189/call-stack.png 1035w,\n/static/0eef6d158c3df7b0252e12db82503897/b79a5/call-stack.png 1372w\"\n        sizes=\"(max-width: 690px) 100vw, 690px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n    </span></p>\n<p>No lado direito do seu <strong>DevTools</strong> ou da imagem, você consegue encontrar a aba <strong>Call Stack</strong>, onde você encontra toda a pilha de chamadas executadas até o ponto onde o breakpoint <code class=\"language-text\">debugger</code> foi executado e logo abaixo a aba <strong>scope</strong> que mantém as variáveis envolvidas naquele escopo (incluindo o <code class=\"language-text\">this</code>!). E o que aconteceu neste momento é o seguinte:</p>\n<ul>\n<li>a função <code class=\"language-text\">primeira</code> é executada na página em questão pelo motor <strong>JavaScript</strong>, sua execução é a primeira linha (mais abaixo) e, como é executada pelo próprio script, recebe o nome de <strong>(anonymous)</strong></li>\n<li>a função <code class=\"language-text\">primeira</code> recebe <code class=\"language-text\">num</code> (com valor 1) como argumento e é empilhada na <strong>call stack</strong>, e retorna a execução da função <code class=\"language-text\">segunda</code> passando <code class=\"language-text\">num + 1</code> como parâmetro</li>\n<li>a função <code class=\"language-text\">segunda</code> é executada e executada e recebe <code class=\"language-text\">num</code> (agora valor 2) como argumento, nesse momento, a função é empilhada à <strong>call stack</strong> e retorna a execução da função <code class=\"language-text\">terceira</code> passando <code class=\"language-text\">num + 1</code> como parâmetro</li>\n<li>a função <code class=\"language-text\">terceira</code> é executada e empilada à <strong>call stack</strong> recebendo <code class=\"language-text\">num</code> (agora com valor 3) e o <code class=\"language-text\">debugger</code> é executado.</li>\n</ul>\n<p>Ao executar o <code class=\"language-text\">debugger</code>, é apresentado o estado na qual <strong>call stack</strong> se encontra. Com isso você pode ver as chamadas empilhadas de forma correta e os valores mantidos em <strong>scope</strong>: neste momento <code class=\"language-text\">this</code> refere-se à <code class=\"language-text\">window</code> e <code class=\"language-text\">num</code> é <code class=\"language-text\">3</code>.</p>\n<p>Após continuar a execução do <strong>script</strong>, a função <code class=\"language-text\">terceira</code> retorna o valor de <code class=\"language-text\">num + 1</code> (4, ao total) e é desempilhada da <strong>call stack</strong>, após isso, a função <code class=\"language-text\">segunda</code> e <code class=\"language-text\">primeira</code> são desempilhadas em ordem e, por fim, você consegue ver o valor <code class=\"language-text\">4</code> sendo impresso no console.</p>\n<p>Talvez você já tenha lido que <strong>JavaScript</strong> segue o paradigma <strong>run-to-completion</strong> (ou \"execução até conclusão\" traduzido). Isso quer dizer que as funções declaradas na linguagem (com uma exceção, que abordaremos mais abaixo) seguem sua ordem de execução síncronamente até que terminem por completo. Por isso, toda função possui um <code class=\"language-text\">return</code> mesmo que implícito. Tente executar o trecho de código acima com uma pequena alteração:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">terceira</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">segunda</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">terceira</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">primeira</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">segunda</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">primeira</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Apenas removemos o <code class=\"language-text\">console.log</code> que mostra o valor final e o <code class=\"language-text\">return</code> da função <code class=\"language-text\">primeira</code>. Note que agora que no seu console aparecerá uma linha com <code class=\"language-text\">undefined</code> ao final da execução. Isso ocorre porque a função <code class=\"language-text\">primeira</code>, embora tenha chamado a função <code class=\"language-text\">segunda</code> e executado todos os passos como vimos anteriormente, não retornou valor algum explicitamente (ao contrário das funções <code class=\"language-text\">segunda</code> e <code class=\"language-text\">terceira</code>) e, por isso, retorna <code class=\"language-text\">undefined</code> por padrão.</p>\n<h4>Maximum call stack size exceeded</h4>\n<p>Talvez você já tenha visto o erro <code class=\"language-text\">Maximum call stack size exceeded</code> no seu console. Esse erro ocorre justamente quando um trecho de código empilha funções excessivamente na <strong>call stack</strong>, geralmente por algum trecho recursivo ou que apresente algum loop infinito que faz com que a <strong>pilha de chamadas</strong> \"estoure\" (nome, inclusive, dado ao famoso fórum \"<strong>Stack Overflow</strong>\").</p>\n<h4>Stack Trace</h4>\n<p>Outro comportamento comum é o chamado <code class=\"language-text\">stack trace</code>, que é o rastro de execução das funções até um determinado erro, por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">terceira</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ops'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">segunda</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">terceira</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">primeira</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">segunda</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">primeira</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Executando esse trecho você conseguirá visualizar todas as chamadas envolvidas até o momento onde a função disparou um erro, algo como:</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 524px;\"\n    >\n      <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 94.27480916030534%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'377\\'%3e%3cpath%20d=\\'M0%20189v188h16l17-1h2l183%201h183V0H0v189m10%2084c-4%204-1%2012%205%2012l4-2c5-4%203-12-4-12l-5%202\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image lazyload\"\n        alt=\"StackTrace no DevTools do Chrome\"\n        title=\"StackTrace no DevTools do Chrome\"\n        data-src=\"/static/26ee6b032a3c978fd693c06b5e9e7c4a/664c8/stack-trace.png\"\n        data-srcset=\"/static/26ee6b032a3c978fd693c06b5e9e7c4a/991de/stack-trace.png 173w,\n/static/26ee6b032a3c978fd693c06b5e9e7c4a/e4d6b/stack-trace.png 345w,\n/static/26ee6b032a3c978fd693c06b5e9e7c4a/664c8/stack-trace.png 524w\"\n        sizes=\"(max-width: 524px) 100vw, 524px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n    </span></p>\n<p>Ou seja:</p>\n<ul>\n<li>o script executou a função \"primeira\"</li>\n<li>a função \"primeira\" foi empilhada e retornou a função \"segunda\"</li>\n<li>a função \"segunda\" foi empilhada e retornou a função \"terceira\"</li>\n<li>a função \"terceira\" foi empilhada e, nesse momento, todo esse rastro fica disponível para visualização e o erro é impresso no terminal</li>\n</ul>\n<h3>APIs envolvidas: lidando com detalhes de implementação</h3>\n<p>Além da <strong>Call Stack</strong>, existem outras camadas de <strong>APIs</strong> envolvidas ao rodar <strong>JavaScript</strong>. Funções como <code class=\"language-text\">setTimeout</code>, ou que permitem acesso ao <code class=\"language-text\">DOM</code>, realização de <strong>AJAX</strong> com <code class=\"language-text\">XmlHttpRequest</code> ou até mesmo acesso aos arquivos existentes no disco rígido do computador foram implementadas separadamente e não fazem parte do motor de execução. Essas <strong>APIs</strong> são providas pelo ambiente no qual você executa seu código, podendo ser:</p>\n<ul>\n<li>Web (nos navegadores)</li>\n<li>C++ (no NodeJS)</li>\n</ul>\n<h4>Web APIs</h4>\n<p>São as <strong>APIs</strong> implementadas pelos navegadores (como Google Chrome). Funções de acesso à elementos <code class=\"language-text\">DOM</code> estão presentes apenas ao rodar um código <strong>JavaScript</strong> no navegador (afinal, não existe <code class=\"language-text\">DOM</code> no <strong>NodeJS</strong>).</p>\n<h4>C++ APIs</h4>\n<p>São as <strong>APIs</strong> providas para o <strong>NodeJS</strong>, já que é escrito em C++. Algumas funções existentes nas APIs web foram reescritas (como o <code class=\"language-text\">setTimeout</code>) e podem ser utilizadas nesse contexto também, mas muitas outras são específicas: como o módulo <code class=\"language-text\">fs</code> responsável por acessar o sistema de arquivos da máquina e realizar operações com dados do disco rígido.</p>\n<h3>Task Queue: a fila de tarefas</h3>\n<p>A <strong>task queue</strong> (ou <strong>fila de tarefas</strong>), também conhecida como <strong>message</strong> ou <strong>callback</strong> <strong>queue</strong> é a estrutura responsável por armazenar tarefas assíncronas e trabalha em conjunto com a <strong>call stack</strong> e as <strong>APIs</strong> existentes no ambiente em que você roda seu código.</p>\n<p>Imagine o seguinte trecho:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">delayLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O que acontece quando você executa esse exemplo é:</p>\n<ul>\n<li><code class=\"language-text\">console.log</code> é executado com o valor <code class=\"language-text\">1</code>, empilhado e desempilhado da <strong>call stack</strong> e o valor é exibido no console</li>\n<li>a função <code class=\"language-text\">setTimeout</code> (provida pelas <strong>APIs</strong> do seu ambiente) é empilhada na <strong>call stack</strong>, registrando a função <code class=\"language-text\">delayLog</code> como <code class=\"language-text\">callback</code> e pra ser executado apís <code class=\"language-text\">1000</code> milissegundos (1 segundo)</li>\n<li>o navegador (ou NodeJS) registra um <code class=\"language-text\">timer</code> com contador de <code class=\"language-text\">1000</code> milissegundos em <code class=\"language-text\">background</code> e continua a execução do código normalmente e a função <code class=\"language-text\">setTimeout</code> é desempilhada da <strong>call stack</strong>, deixando à livre para executar o restante do código</li>\n<li>a função <code class=\"language-text\">console.log</code> é executada com valor <code class=\"language-text\">3</code>, empilhada e desempilhada da <strong>call stack</strong> e o valor também é exibido no console</li>\n<li>após 1 segundo (<code class=\"language-text\">1000</code> milissegundos) a função <code class=\"language-text\">delayLog</code> é inserida na <strong>call stack</strong> (caso esteja vazia), onde o <code class=\"language-text\">console.log</code> é executado e o valor <code class=\"language-text\">2</code> é impresso no console.</li>\n</ul>\n<p>Dessa forma, códigos assíncronos (como callbacks do <code class=\"language-text\">setTimout</code>) são registrados e inseridos em uma <strong>fila</strong>, onde são executados posteriormente na ordem em que foram definidos.</p>\n<p>É pos isso que, muito provavelmente, você você já tenha visto alguma execução de <code class=\"language-text\">setTimeout</code> da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O que acontece nesse caso é que, mesmo a função sendo registrada para ser executada em <code class=\"language-text\">0</code> milissegundos, ela só será executada após ser registrada na <strong>task queue</strong> e ao retornar à <strong>call stack</strong> quando estiver completamente vazia. Fazendo com que o restante do código síncrono execute primeiro.</p>\n<p>O mesmo ocorre com os <code class=\"language-text\">listeners</code> de eventos do <code class=\"language-text\">DOM</code>. Quando você registra alguma função, como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onClickButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Essa função é registrada na <strong>web API</strong> do navegador em questão e, ao clicar no botão, faz com que essa função entre na <strong>task queue</strong> e, consequentemente, seja empilhada na <strong>call stack</strong> para ser executada e desempilhada.</p>\n<p>É inclusive por isso que funções como <code class=\"language-text\">setTimeout</code> e <code class=\"language-text\">setInterval</code>, retornam um valor numérico, servindo de identificador na <strong>task queue</strong> para que você possa cancelá-las caso deseje, tente fazer o seguinte teste:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timer 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timer 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Perceba que apenas <code class=\"language-text\">timer 1</code> aparecerá no console.</p>\n<h2>Outras filas do motor</h2>\n<p>No entanto, não existe somente um tipo de <strong>fila</strong> nos motores <strong>JavaScript</strong>.</p>\n<h3>Microtask Queue</h3>\n<p>Com a adição das <strong>Promises</strong> ao <strong>EcmaScript</strong>, esse novo tipo de fila foi inserido nos motores <strong>JavaScript</strong>. É a <strong>fila</strong> responsável por lidar com a execução de <strong>Promises</strong>.</p>\n<p>Em outras palavras, cada vez que você executar algum trecho que utilize <strong>Promise</strong>, como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lida com a promise</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Essa chamada será <strong>enfileirada</strong> em uma <strong>fila</strong> diferente da <strong>task queue</strong>.</p>\n<p>A <strong>microtask queue</strong> possuí alguns comportamentos específicos, tendo uma certa prioridade em relação à <strong>task queue</strong>.</p>\n<p>Em um cenário em que existam tarefas enfileiradas na <strong>task queue</strong> e na <strong>microtask queue</strong>, todas que estão na <strong>microtask queue</strong> serão executadas primeiramente.</p>\n<p>Isso quer dizer que o motor <strong>JavaScript</strong> que estiver executando uma tarefa vinda da <strong>task queue</strong> finalizará sua execução mas, a próxima tarefa que irá executar será prioritariamente vinda da <strong>microtask queue</strong> até que todas as tarefas dessa fila sejam finalizadas.</p>\n<p>Para testar, execute o seguinte código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log 2'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Perceba que a ordem das informações printadas no console será a seguinte:</p>\n<ul>\n<li>log 1</li>\n<li>log 2</li>\n<li>promise 1</li>\n<li>promise 2</li>\n<li>timeout 1</li>\n<li>timeout 2</li>\n</ul>\n<h3>Animation Frame Callback Queue (ou Animation Queue)</h3>\n<p>É a <strong>fila</strong> responsável por conter as tarefas de <code class=\"language-text\">callback</code> ao executar a função <strong>requestAnimationFrame</strong>.\nAo realizar a chamada dessa função, também retornam um número que serve como identificador do <code class=\"language-text\">callback</code> registrado na <strong>fila</strong> onde são armazenados até sua execução (assim como o exemplo anterior do <code class=\"language-text\">setTimeout</code> e do <code class=\"language-text\">setInterval</code>).</p>\n<p>Essa <strong>fila</strong> trabalha em conjunto com a <strong>Rendering Pipeline</strong> que é a sequência de processos que o navegador executa para repintar um elemento na tela.</p>\n<p>Essa <strong>fila</strong> também possuí um tratamento diferenciado se comparada à <strong>task queue</strong> e à <strong>microtask queue</strong>, de forma que sua execução só se dá início ao finalizar as tarefas das demais filas, entretanto, se novas tarefas dessa <strong>fila</strong> forem <strong>enfileiradas</strong> após o início de sua execução, elas serão executadas somente no próximo <strong>loop</strong> de eventos.</p>\n<h2>E o tal do Event Loop?</h2>\n<p><strong>Event Loop</strong> é a peça responsável por orquestrar esses componentes em questão. Ele checa se a <strong>call stack</strong> está vazia e não executa mais nenhuma função. Caso esteja, verifica se existe alguma função na <strong>task queue</strong> que deve ser executada e, caso a <strong>call stack</strong> esteja vazia, ele faz com que a tarefa em questão seja executada e empilhada.</p>\n<p>Caso a <strong>microtask queue</strong> possua tarefas, elas serão executadas prioritariamente antes das tarefas presentes na <strong>task queue</strong>, mesmo que novas <code class=\"language-text\">Promises</code> sejam enfileiradas ao longo desse processo e, ao finalizar, o motor checará se é necessário realizar algum <code class=\"language-text\">repaint</code> na tela e executará os demais <code class=\"language-text\">callbacks</code> registrados na <strong>animation queue</strong>.</p>\n<h2>Iteradores, iteráveis e Geradores</h2>\n<p>Outra estrutura de dados que tem um comportamento diferenciado em relação à <strong>call stack</strong> são os iteradores (ou <strong>iterators</strong>) e os <strong>geradores</strong> (ou <strong>function generators</strong>).</p>\n<p>Iteradores foram criados para suprir uma forma de iterar valores não-lineares (que não são arrays) e geradores são utilizados para facilitar sua implementação, imagine o seguinte trecho:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> generated <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// cria o iterador e o mantém suspenso</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generated<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 1, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generated<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 2, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generated<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: 3, done: false }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>generated<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { value: undefined, done: true }</span></code></pre></div>\n<p>O asterisco (*) após o nome da função indica que ela é uma função geradora, e cada um dos <code class=\"language-text\">yield</code> é responsável por retornar um valor e \"pausar\" a execução dessa função, até que próximo <code class=\"language-text\">next</code> seja executado. Ao executarmos a função <code class=\"language-text\">createIterator()</code> e atribuir seu retorno à uma variável, apenas estamos declarando um novo iterador, e a execução da função só é realmente iniciada a partir do primeiro <code class=\"language-text\">next</code> executado.</p>\n<p>A cada novo <code class=\"language-text\">next</code>, uma nova função é empilhada na <strong>call stack</strong>, desempilhada e retorna o valor apresentado no <code class=\"language-text\">yield</code>. Nesse momento, todo seu contexto de execução e variáveis de escopo são armazenadas e o objeto gerador mantém uma cópia desses valores para que possa continuar sua execução no futuro. Para visualizar melhor, você pode inserir um <code class=\"language-text\">debugger</code> antes de cada um dos <code class=\"language-text\">yield</code> presente na função acima:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> generated <span class=\"token operator\">=</span> <span class=\"token function\">createIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note que nada aconteceu, mas se você executar <code class=\"language-text\">generated.next()</code> o primeiro <code class=\"language-text\">debugger</code> entrará em ação, assim como os demais conforme sua execução.</p>\n<p>Muito parecida essa estrutura com a utilizada pelo <code class=\"language-text\">async/await</code>, não? Os geradores serviram como base para criação dessa estrutura que facilita a escrita de <code class=\"language-text\">Promises</code>, tornando sua leitura mais amigável e dando a sensação de que código assíncrono é executado de forma síncrona.</p>\n<h2>Web Workers</h2>\n<p><strong>Web Workers</strong> funcionam de maneira igual às execuções de <strong>JavaScript</strong> comum, a única diferença é que são executados em segundo plano (outra thread). Por não rodarem diretamente no navegador, não possuem acesso ao <code class=\"language-text\">DOM</code> e nem são manipulados por eventos de click ou interação de usuários e se comunicam com a thread principal através de eventos de mensagem.</p>\n<p>Em resumo, <strong>web workers</strong> possuem sua própria <strong>call stack</strong> com suas <strong>filas</strong> definidas e são recomendados para operações que demandem alto processamento de dados para que não impactem a experiência do usuário ao ocupar a thread principal.</p>\n<h2>Exceções no NodeJS</h2>\n<p>Todos os conceitos até o momento são aplicados em um ambiente de NodeJS, com exceção da <strong>Animation Frame Callback Queue</strong> e da <strong>Rendering Pipeline</strong>, já que o NodeJS não realiza nenhuma animação ou renderização.</p>\n<p>O <strong>Event Loop</strong> do NodeJS também possui algumas particularidades. Enquanto o <strong>Event Loop</strong> de um navegador fica checando as filas e prepara-se para execução das tarefas a todo momento, o do NodeJS realiza sua execução apenas quando existem tarefas a serem executadas.</p>\n<p>O NodeJS também possui algumas <strong>filas</strong> diferentes, sendo:</p>\n<ul>\n<li>uma para eventos de callback (parecida com a <strong>task queue</strong>), para I/O, operações de leitura/escrita em disco</li>\n<li><strong>check queue</strong> que rodará todos as tarefas executadas com <code class=\"language-text\">setImmediate</code> (praticamente o mesmo que o <code class=\"language-text\">setTimeout(callback, 0)</code>, mas com prioridade diferente caso alguma operação de I/O esteja ocorrendo)</li>\n<li>uma para timers do <code class=\"language-text\">setTimeout</code> e <code class=\"language-text\">setInterval</code></li>\n<li>uma <strong>microtask queue</strong> para <code class=\"language-text\">Promises</code></li>\n<li>outra <strong>microtask queue</strong> para execução de tarefas imediatas, através do <code class=\"language-text\">process.nextTick()</code>, que possui uma prioridade maior que a <strong>microtask queue</strong> de <code class=\"language-text\">Promises</code></li>\n</ul>\n<p>Caso queira testar, você pode executar o seguinte trecho via NodeJS:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo test.js</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tick 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'immediate 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tick 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'immediate 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log 2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Caso você execute <code class=\"language-text\">node test.js</code> você receberá o seguinte como output:</p>\n<ul>\n<li>log 1</li>\n<li>log 2</li>\n<li>tick 1</li>\n<li>tick 2</li>\n<li>promise 1</li>\n<li>promise 2</li>\n<li>timeout 1</li>\n<li>timeout 2</li>\n<li>immediate 1</li>\n<li>immediate 2</li>\n<li>O log dos <code class=\"language-text\">setImmediate</code> podem variar, por não estarem em uma execução de I/O</li>\n</ul>\n<p>Caso queira testar um evento de I/O e ver a execução do <code class=\"language-text\">setImmediate</code> com prioridade em ação, pode testar com:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setImmediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'immediate'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Crie um arquivo qualquer e substitua <code class=\"language-text\">__filename</code> pelo seu nome e execute esse trecho.\nVocê verá que o log exeutado pelo <code class=\"language-text\">setImmediate</code> sempre ocorrerá antes do log de <code class=\"language-text\">setTimeout</code>.</p>\n<p>Caso queira checar mais afundo, você pode dar uma olhada na <a href=\"https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentação</a>.</p>\n<h2>Resumo</h2>\n<p>Para resumirmos, vale lembrar que os motores <strong>JavaScript</strong> fazem uso dos conceitos de pilha (para a pilha de chamadas) e de fila (para as filas de tarefa, callbacks de promise e de animation). Ao rodar seu código, algumas APIs de ambiente também estão presentes, sejam elas providas pelo navegador (web) ou pelo NodeJS (C++). E o Event Loop é a peça responsável por orquestrar essa execução, checando as filas de tarefa e inserindo essas tarefas na <strong>call stack</strong> quando vazia.</p>\n<p>Ao final, podemos imaginar o motor <strong>JavaScript</strong> como:</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto;  max-width: 485px;\"\n    >\n      <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 101.23711340206185%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'405\\'%3e%3cpath%20d=\\'M198%2022v15h-9l-9%201h18v21h-3l-2%201h5v130h149V8H198v14M8%20100v91h41c39%200%2041%200%2040%202v5c1-1%201%206%201%2028a294%20294%200%20003-29l-1-3-1-3h83v-64a473%20473%200%20011-65l-1-26V9H8v91m191-77v14l5-1a421%20421%200%20011%202h-6v21h12c12%201%2022%203%2028%206%204%203%201%202-4%200-7-3-19-5-28-5h-8v129h147v-15l-1-16v-1l1-74V9H199v14M9%20100v90h164V64h-6l3-1%203-1V39h-4l-10%201h-6v13H29l-1-13V27h125v12l9-1%2010-1%201-13V10H9v90m19-32l1%2013h124v-6l1-7v-1l-1-6v-6H28v13m1%2017l-1%2013v12h125V84H91l-62%201m239%2020a1469%201469%200%20001%2028v3l1%203h-62v26h125v-6c0-5%200-6%202-6v-1c-2%200-2-1-2-6v-7h-62l1-3%201-3c-1%200-2-2-2-11l-2-16c-2-5-2-5-1-1m-239%209l-1%2013v12h125v-26H91l-62%201m-1%2042v13h125v-26H28v13m250-7v7c2%201%204%200%204-2%200-1%201-1%202%201l2%203%202-3c1-2%202-2%202-1%200%202%202%203%204%202%201-1%202-4%201-6s-4-3-5%200h-1c-1-2-3-2-5%200h-2c-1-2-3-2-4-1m-14%2029l-3%203-1%201-2-3c-3-1-3-1-3%201h-6c1-2%200-3-2-1h-4l-1%201-1-2v3c0%205%202%206%203%203l1-1c1%202%203%203%203%200l2%201c2%202%202%202%203%201l2-1c1%203%206%202%207%200%200-2%200-2%202%200%201%202%203%203%205%200h11v-3l-2-1c0%203-4%203-4%200h-1l-3%202-2%201c-1%202-3%200-3-2s0-2%203-2h1c-1-2-2-2-5-1m-174%201c-2%201-1%204%201%204l2%201h-4c0%201%203%203%204%202%202%200%203-4%201-4v-1c1%200%202%201%202%203s0%202%207%202l7-1h3v-3c0-2%200-2-1-1l-2-2c-1-1-1-1-1%201s0%202-1%201c-1-2-4%200-4%202s0%202-1%200c0-1-1-3-3-3a15%2015%200%2001-4%200l-3-1h-3m259%2077v24H169v-9l-1-8v18h182v-37l3-3c2-2%202-3%201-3l-2-1v-1c-1%202-2%201-2-1-1-1-1%208-1%2021m-173%200v13h42v-26h-42v13m142-1c0%203%201%205%205%205l2-2h1c1%202%205%203%205%201h1c0%202%203%201%204-1h1c1%202%205%203%205%201h1c0%202%203%201%204-1s-1-6-3-4h-3l-1%202-1%203v-3l-1-2h-6c0%202-1%202-1%201%200-2-2-1-2%201l-1%201c0-5-9-6-10-2M65%20287c-1%203%200%205%203%206l3-3%201-2v2c1%204%203%204%204%200v-2l1%202c1%203%205%204%206%201l1%201c1%201%201%201%201-1%200-4%202-5%202-2l1%204%201-3c0-4%200-4-2-4s-3%201-3%202h-1c-1-2-7-2-9%200h-1c0-2-7-3-8-1m111%2027v13h51v-25l-26-1h-25v13m144-4c-2%201-3%206-1%207%203%201%206%201%206-1h1c1%202%202%202%204%201h5c1-2%202-2%203%200h5c1%202%203%201%204-1%202-3-1-6-3-4h-2c0-2-2%200-2%203-1%201-1%201-1-1s-2-4-2-2h-6c0-2-2-1-2%202%200%202%200%202-1%200l-1-2-3-1c-1-2-2-2-4-1m-47%204l1%203%201-1h4l2%201%202-1c0-1%201-1%201%201h5l1-2c0-3%202-3%202%200%201%203%203%203%205%200l1-2v2c0%202%201%203%206%203l6-1h1l1-1h1l1%201%201-3c0-2-1-3-2-2%200%201-1%201-1-1-1-1-1-1-1%201s0%203-2%202v-2c-2-1-3%200-3%202s0%202-1%200c0-2-1-3-3-3h-9l-4%201h-4c-2%201-2%201-2-1h-2c0-2-3-1-4%201v3l-1-3c0-3-3-3-3%202m-105%2044l-1%2012-9-3-9-2c-1%201%202%202%206%203l10%203c2%201%203%201%203%2013%200%2010%201%207%201-12v-25h180v24l1%2024v-49H168v12m62%2010l-1%201h-4c-2%200-2%201-2%202l-1%202-1-2c0-2-1-2-3-2-4%200-4%200-4%203s0%203%201%201l1-2%201%202%201%203v-3c0-2%202-3%202%200%200%201%201%202%203%202%203%200%204%200%204-3l1-2v2c0%203%203%204%204%202h1l2%201%202-1h1c0%202%202%201%202-1l1-2v2l1%202%201-3c-1-3-4-4-5-2h-1l-2-1-2%201c-1%201-1%200-1-1%200-2-2-3-2-1m63%203c0%203%200%204%203%204l3-1h1l3%201%202-1h8c1%201%202%200%202-2s-1-3-2-2l-1-2h-1c0%201-1%202-2%201l-2%201h-8l-1-1-2-1-1-1c-2%200-2%201-2%204m26-3c-2%203%200%207%203%207%202%201%203%200%203-1%200-2%200-2%201-1%200%202%205%203%205%201h1c0%202%204%201%204-1h1c0%203%2010%203%2010%200%201-3-3-6-4-3h-1c0-2-2-1-2%202l-1%203v-3c0-3-2-4-2-2h-6c0-2-2-1-2%202%200%202%200%202-1%200l-1-2-2-2h-6\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image lazyload\"\n        alt=\"Diagrama sobre os componentes V8\"\n        title=\"Diagrama sobre os componentes V8\"\n        data-src=\"/static/80fc4966498dfb7b0b4b0029f3602c82/44c61/diagrama.png\"\n        data-srcset=\"/static/80fc4966498dfb7b0b4b0029f3602c82/991de/diagrama.png 173w,\n/static/80fc4966498dfb7b0b4b0029f3602c82/e4d6b/diagrama.png 345w,\n/static/80fc4966498dfb7b0b4b0029f3602c82/44c61/diagrama.png 485w\"\n        sizes=\"(max-width: 485px) 100vw, 485px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n    </span></p>\n<p><a href=\"https://github.com/gabrieluizramos/entrevistas/blob/master/estudos/javascript-engines.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Links relacionados</a></p>","timeToRead":17,"frontmatter":{"date":"23/09/2019","path":"/post/entendendo-o-v8-peca-por-peca/","title":"Entendendo o V8 peça por peça","subtitle":"Um resumo sobre os componentes e conceitos envolvidos no motor JavaScript","banner":null}}},"pageContext":{}}}